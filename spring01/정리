. 클래스를 Controller라는 이름으로 만든다
. 클래스에 @Controller 를 지정한다
 요청에 대한 처리 : 
   메소드 선언 --> @RequestMapping 선언(주소창에 요청이 들어왔을 때 이 메소드를 실행하도록 연결 할 것인지)
   				-> 메소드 내부에서는 비즈니스 로직 처리를 선언
   				-> 화면응답
   					return "화면명" :WEB -INF/view/화면명.jsp	
   					
 개발자가 직접객체를 생성하고 메소드를 호출하던 처리를 스프링이 한다.
 (기존에  개발자가 new 로 생성했던 것 )
 객체생성의 주체가 스프링이다. IoC(Inversion of Control:제어의 반전)
  - 스프링 IoC는 스프링에게 제어를 위임해서 스프링이 객체를 만들고 관리하는 구조
  
  
화면 연결형태
1. Model을 사용해 화면 연결  
 -  Model로 화면에 출력할 정보를 담고, addAttribute()
  	응답화면명을 return 한다.
  
 2. ModelAndView객체를 사용해 화면 연결
	 ModelAndView 객체 생성
	 생성한 객체를 화면에 출력할 정보를 담고 addObject()
	 응답화면명을 지정 setViewName()
	 생성한 객체를  return 한다
	 
===================================================================================================================
파라미터 접근 방법
1. HttpServletRequest 객체의 getParameter()로 파라미터를 접근
2. @RequestParam을 사용해 파라미터 접근 
3.	데이터객체(DTO, VO, Domain)을 사용해 파라미터에 접근 
파라미터는 아니고 특정 값 한 두개 정도를 경로의 형태로 전달하고자 할 때
@PathVariable 을 사용해 경로에 해당하는 값을 접근
	  
	 